{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "svmocl",
	"patterns": [
		{
			"include": "#aspect_expression"
		},
		{
			"include": "#pre_expression"
		},		
		{
			"include": "#keywords"
		},
		{
			"include": "#collection_keywords"
		},
		{
			"include": "#internal_functions"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#function_call"
		},
		{
			"include": "#inline_comment"
		},
		{
			"include": "#let_expression"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#function_definition"
		},
		{
			"include": "#variable_definition"
		},
		{
			"include": "#class_member"
		},
		{
			"include": "#new_expression"
		},
		{
			"include": "#type_definition"
		},
		{
			"include": "#access_group"
		},
		{
			"include": "#access_types"
		},
		{
			"include": "#members"
		},
		{
			"include": "#fallback"
		},
		{
			"include": "#hex_numbers"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		}
		
	],
	"repository": {
		"fallback": {
			"match": "\\b([A-Za-z_]\\w*)\\b",
			"captures": {
				"1": {
					"name": "variable.svmocl"
				}
			}
		},
		"members": {
			"match": "\\.([A-Za-z_]\\w*)(?!\\()\\b",
			"captures": {
				"1": {
					"name": "variable.svmocl"
				}
			}
		},
		"function_call": {
			"patterns": [
				{
					"name": "support.function.svmocl",
					"match": "\\b([A-Za-z_]\\w*)\\s*\\((?=([A-Za-z_]*\\)[^:]))"
				}
			]
		},
		"aspect_expression": {
			"match": "\\b(aspect)\\s+(\\w+)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.svmocl"
				},
				"2": {
					"name": "support.type.property-name"
				}
			}
		},
		"pre_expression": {
			"match": "\\b(pre)\\s+([\\w\\-\\s]+)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.svmocl"
				},
				"2": {
					"name": "string.quoted.double.svmocl"
				}
			}
		},
		"new_expression": {
			"match": "\\b(new)\\s+(\\w+)",
			"captures": {
				"1": {
					"name": "keyword.operator.new.svmocl"
				},
				"2": {
					"name": "entity.name.class.svmocl"
				}
			}
		},
		"type_definition": {
			"match": "\\b(?i:(class|type))\\s+(\\w+)(?:\\s*:\\s*(\\w+))?\\b",
			"captures": {
				"1": {
					"name": "keyword.other.svmocl"
				},
				"2": {
					"name": "entity.name.class.svmocl"
				},
				"3": {
					"name": "entity.name.class.svmocl"
				}
			}
		},
		"variable_definition": {
			"match": "\\b(?:(optional)\\s+)?(\\w+)\\s*:\\s*(\\w*)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.svmocl"
				},
				"2": {
					"name": "variable.svmocl"
				},
				"3": {
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},
		"class_member":{
			"match":"\\b(?:(\\w+)\\s*([\\(\\[\\<][\\d]*\\.*[\\dNn*]?[\\)\\]\\>])?\\s*:\\s*(\\w+))\\b",
			"captures": {
				"1":{
					"name": "variable.svmocl"
				},
				"2":{
					"name": "constant.numeric.svmocl"
				},
				"3":{
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},
		"function_definition": {
			"match": "\\b(context|constraint)\\s+(\\w+)(?:\\s*::\\s*(\\w+)\\s*)?(?:\\((.*)\\)\\s*)?(?::\\s*(\\w+))?\\b",
			"captures": {
				"1": {
					"name": "keyword.other.svmocl"
				},
				"2": {
					"name": "entity.name.class.svmocl"
				},
				"3": {
					"name": "support.function.svmocl"
				},
				"4": {
					"patterns": [
						{
							"include": "#variable_definition"
						}
					]
				},
				"5": {
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},
		"access_group": {
			"patterns": [
				{
					"match": "\\b(access role)\\s+(\\w+):\\s?(.*)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.svmocl"
						},
						"2":{
							"name":"support.function.svmocl"
						},
						"3":{
							"name":"constant.numeric.svmocl"
						}
					}
				},
				{
					"match": "\\b(access role)\\s+(\\w+)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.svmocl"
						},
						"2":{
							"name":"support.function.svmocl"
						}
					}
				},
				{
					"match":"\\b(access role)\\b",
					"name":"keyword.other.svmocl"
				}
			]
		},
		"access_types":{
			"patterns": [
				{
					"match": "\\b(acc|nav)\\b([A-Za-z0-9,.\\[\\]\\s]*)=?",
					"captures": {
						"1":{
							"name":"keyword.control.svmocl"
						},
						"2":{
							"patterns": [
								{
									"match": "\\[(.*)\\]",
									"captures": {
										"1":{
											"patterns": [
												{
													"match": "([A-Za-z0-9\\.]+)",
													"captures": {
														"1":{
															"name":"constant.numeric.svmocl"
														}
													}
												}
											]
										}
									}
								},
								{
									"match": "\\s*([A-Za-z0-9_]+),?",
									"captures": {
										"1":{
											"name":"entity.name.class.svmocl"
										}
									}
								}
							]
						}
					}
				},
				{
					"match": "\\b(public|private|protected)\\s+([A-Za-z0-9_]+)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.svmocl"
						},
						"2":{
							"name":"constant.numeric.svmocl"
						}
					}
				},
				{
					"match": "\\b(public|private|protected)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.svmocl"
						}
					}
				}
			]
		},
		"inline_comment": {
			"patterns": [{
				"name": "comment.line.svmocl",
				"match": "--.*$"
			}]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.svmocl",
					"match": "\\b(let|const|if|else|while|wend|end while|for|return|end if|in|then|mod|xor|or|not|select|case|end select|forAll|revForAll|orderedBy|exists|insert|prior|next|at|sum|max|min|avg|iterate|asTree|set|backNav|readOnly|asType|isTypeOf|isKindOf)\\b"
				},
				{
					"name": "keyword.other.svmocl",
					"match": "\\b(post|pre|inv|self|element|result|false|true|null|end\\s+class|end\\s+type|user|group|admin)\\b"
				}
			]
		},
		"collection_keywords":{
			"match":"\\.\\b(newElement|delete|removeAll|first|last|count)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.svmocl"
				}
			}
		},
		"internal_functions":{
			"patterns": [
				{
					"name":"keyword.other.svmocl",
					"match": "\\b(Min|Max|Sin|Cos|Tan|Asin|Acos|Atan|Asc|Uni|Chr|InStr|LCase|Left|Len|LTrim|Mid|Replace|ReverseStr|Right|RTrim|StrComp|StrSet|Trim|UCase|Abs|Ceil|Exp|Floor|Hex|Int|Log|Log10|MulDiv|Pow|Sgn|Sqrt|CCur|CDbl|CSpan|CStr|Format)\\b"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.type.primitive.svmocl",
					"match": "\\b(integer|string|currency|number|date|boolean|timespan|memblock)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.svmocl",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.svmocl"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.svmocl"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qstring-single": {
			"name": "string.quoted.single.svmocl",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.svmocl"
				}
			},
			"end": "(\\')",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.svmocl"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.svmocl",
			"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},

		"types": {
			"match": "\\b(?:(integer|string|currency|number|date|boolean|long|timespan)|(\\w+))\\b",
			"captures": {
				"1": {
					"name": "storage.type.primitive.svmocl"
				},
				"2": {
					"name": "entity.name.class.svmocl"
				}
			}
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.svmocl",
					"match": "([+-]?\\d+\\.?\\d*)"
				}
			]
		},
		"hex_numbers":{
			"patterns": [
				{
					"name":"constant.numeric.svmocl",
					"match":"(&h[a-fA-F0-9]+)"
				}
			]
		},
		"operators":{
			"patterns": [
				{
					"name":"keyword.operator.svmocl",
					"match": "=|<>|<|<=|>|>="
				}
			]
		}
	},
	"scopeName": "source.svmocl"
}